name: Java CI with Maven, SonarQube, and Production Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Trigger deploy to production'
        required: true
        default: 'false'

jobs:
  # Parallel Job: Build and Test on Self-Hosted EC2 (with Tomcat installed)
  build_and_test:
    runs-on: [self-hosted, staging]  # Self-hosted EC2 with Tomcat installed (Staging)
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Environment Setup Script (env-setup.sh)
        run: |
          chmod +x ./env-setup.sh
          ./env-setup.sh  # This sets up Java, Maven, etc.

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys:

      - name: Configure Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>central</id>
                      <username>${{ secrets.JFROG_USERNAME }}</username>
                      <password>${{ secrets.JFROG_API_KEY }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      - name: Build with Maven
        run: mvn clean install -DskipTests
        if: ${{ github.event_name != 'pull_request' }}  # Only run on push events, skip for PR

      - name: Run Unit Tests with Maven
        run: mvn test
        if: ${{ success() }}  # Run this step only if the previous build step succeeded

  # Sequential Jobs: SonarQube Analysis and Artifact Upload
  sonar_analysis:
    runs-on: [self-hosted, staging]  # Self-hosted EC2 with Tomcat installed (Staging)
    needs: build_and_test
    if: ${{ needs.build_and_test.result == 'success' }}  # Run only if build and test succeed
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=akshatha111_hello-word11

  upload_artifact:
    runs-on: [self-hosted, staging]  # Self-hosted EC2 with Tomcat installed (Staging)
    needs: build_and_test
    if: ${{ needs.build_and_test.result == 'success' }}  # Run only if build and test succeed
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Upload Artifact to JFrog Artifactory
        run: |
          echo "Uploading artifact to JFrog Artifactory..."
          curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_API_KEY }}" \
               -T target/my-helloworld.war \
               "https://jfrog.example.com/artifactory/my-repo/my-helloworld-${{ needs.build_and_test.outputs.version }}.war"

  # Matrix Job: Deployment to Staging and Production
 
